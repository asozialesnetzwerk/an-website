{
  "version": 3,
  "sources": ["../../../utils/utils.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0-or-later\nlet lastLocation = String(window.location);\n\nexport function getLastLocation(): string {\n    return lastLocation;\n}\n\nexport function setLastLocation(url: string): void {\n    lastLocation = url;\n}\n\nexport function post(\n    url: string,\n    params = {},\n    ondata = console.log,\n    onerror = console.error,\n    accept = \"application/json\",\n): Promise<void> {\n    return fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(params),\n        headers: {\n            \"Accept\": accept,\n            \"Content-Type\": \"application/json\",\n        },\n    })\n        .then((response) => response.json())\n        .catch(onerror)\n        .then(ondata)\n        .catch(onerror);\n}\n\nexport function get(\n    url: string,\n    params: Record<string, string> | string = {},\n    ondata = console.log,\n    onerror = console.error,\n    accept = \"application/json\",\n): Promise<void> {\n    const paramsString = (new URLSearchParams(params)).toString();\n    return fetch(paramsString ? `${url}?${paramsString}` : url, {\n        method: \"GET\",\n        headers: { Accept: accept },\n    })\n        .then(\n            (response) => response.json(),\n        )\n        .catch(onerror)\n        .then(ondata)\n        .catch(onerror);\n}\n\nexport const PopStateHandlers: Record<\n    string,\n    (state: PopStateEvent) => unknown\n> = {\n    // always reload the location if URLParamChange\n    URLParamChange: () => {\n        window.location.reload();\n    },\n};\n\nexport function setURLParam(\n    param: string,\n    value: string,\n    state: unknown,\n    stateType = \"URLParamChange\",\n    push = true,\n) {\n    // log(\"setURLParam\", param, value, state, onpopstate);\n    const urlParams = new URLSearchParams(window.location.search);\n    urlParams.set(param, value);\n    const newUrl =\n        `${window.location.origin}${window.location.pathname}?${urlParams.toString()}`;\n    // log(\"newUrl\", newUrl);\n    (state as { stateType: string }).stateType = stateType;\n    if (push && newUrl !== window.location.href) {\n        history.pushState(state, newUrl, newUrl);\n    } else {\n        history.replaceState(state, newUrl, newUrl);\n    }\n    lastLocation = window.location.href;\n    return newUrl;\n}\n\nfunction scrollToId() {\n    if (window.location.hash === \"\") {\n        return;\n    }\n    const header = document.getElementById(\"header\");\n    if (!header) {\n        return;\n    }\n    const el = document.querySelector(window.location.hash);\n    if (!el) {\n        return;\n    }\n\n    window.scrollBy(\n        0,\n        el.getBoundingClientRect().top - Math.floor(\n            parseFloat(getComputedStyle(header).height),\n        ),\n    );\n}\n// scroll after few ms so the scroll is right on page load\nsetTimeout(scrollToId, 4);\nwindow.onhashchange = scrollToId;\n\nwindow.onpopstate = (event: PopStateEvent) => {\n    if (lastLocation.split(\"#\")[0] === window.location.href.split(\"#\")[0]) {\n        // Only hash changed\n        lastLocation = window.location.href;\n        scrollToId();\n        return;\n    }\n    if (event.state) {\n        const state = event.state as { stateType: string };\n        const stateHandler = PopStateHandlers[state.stateType];\n        if (stateHandler) {\n            event.preventDefault();\n            stateHandler(event);\n            lastLocation = window.location.href;\n            scrollToId();\n            return;\n        } else {\n            console.error(\"Couldn't find state handler for state\", state);\n        }\n    }\n\n    console.error(\"Couldn't handle state. \", event.state);\n    lastLocation = window.location.href;\n    window.location.reload();\n};\n// @license-end\n"],
  "mappings": "AAAA;AACA,IAAIA,EAAe,OAAO,OAAO,QAAQ,EAElC,gBAAS,iBAA0B,CACtC,OAAOA,CACX,CAEO,gBAAS,gBAAgBC,EAAmB,CAC/CD,EAAeC,CACnB,CAEO,gBAAS,KACZA,EACAC,EAAS,CAAC,EACVC,EAAS,QAAQ,IACjBC,EAAU,QAAQ,MAClBC,EAAS,mBACI,CACb,OAAO,MAAMJ,EAAK,CACd,OAAQ,OACR,KAAM,KAAK,UAAUC,CAAM,EAC3B,QAAS,CACL,OAAUG,EACV,eAAgB,kBACpB,CACJ,CAAC,EACI,KAAMC,GAAaA,EAAS,KAAK,CAAC,EAClC,MAAMF,CAAO,EACb,KAAKD,CAAM,EACX,MAAMC,CAAO,CACtB,CAEO,gBAAS,IACZH,EACAC,EAA0C,CAAC,EAC3CC,EAAS,QAAQ,IACjBC,EAAU,QAAQ,MAClBC,EAAS,mBACI,CACb,MAAME,EAAgB,IAAI,gBAAgBL,CAAM,EAAG,SAAS,EAC5D,OAAO,MAAMK,EAAe,GAAG,OAAAN,EAAG,KAAI,OAAAM,GAAiBN,EAAK,CACxD,OAAQ,MACR,QAAS,CAAE,OAAQI,CAAO,CAC9B,CAAC,EACI,KACIC,GAAaA,EAAS,KAAK,CAChC,EACC,MAAMF,CAAO,EACb,KAAKD,CAAM,EACX,MAAMC,CAAO,CACtB,CAEO,aAAM,iBAGT,CAEA,eAAgB,IAAM,CAClB,OAAO,SAAS,OAAO,CAC3B,CACJ,EAEO,gBAAS,YACZI,EACAC,EACAC,EACAC,EAAY,iBACZC,EAAO,GACT,CAEE,MAAMC,EAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC5DA,EAAU,IAAIL,EAAOC,CAAK,EAC1B,MAAMK,EACF,GAAG,cAAO,SAAS,QAAS,cAAO,SAAS,SAAQ,KAAI,OAAAD,EAAU,SAAS,GAE/E,OAACH,EAAgC,UAAYC,EACzCC,GAAQE,IAAW,OAAO,SAAS,KACnC,QAAQ,UAAUJ,EAAOI,EAAQA,CAAM,EAEvC,QAAQ,aAAaJ,EAAOI,EAAQA,CAAM,EAE9Cd,EAAe,OAAO,SAAS,KACxBc,CACX,CAEA,SAASC,GAAa,CAClB,GAAI,OAAO,SAAS,OAAS,GACzB,OAEJ,MAAMC,EAAS,SAAS,eAAe,QAAQ,EAC/C,GAAI,CAACA,EACD,OAEJ,MAAMC,EAAK,SAAS,cAAc,OAAO,SAAS,IAAI,EACjDA,GAIL,OAAO,SACH,EACAA,EAAG,sBAAsB,EAAE,IAAM,KAAK,MAClC,WAAW,iBAAiBD,CAAM,EAAE,MAAM,CAC9C,CACJ,CACJ,CAEA,WAAWD,EAAY,CAAC,EACxB,OAAO,aAAeA,EAEtB,OAAO,WAAcG,GAAyB,CAC1C,GAAIlB,EAAa,MAAM,GAAG,EAAE,CAAC,IAAM,OAAO,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC,EAAG,CAEnEA,EAAe,OAAO,SAAS,KAC/Be,EAAW,EACX,MACJ,CACA,GAAIG,EAAM,MAAO,CACb,MAAMR,EAAQQ,EAAM,MACdC,EAAe,iBAAiBT,EAAM,SAAS,EACrD,GAAIS,EAAc,CACdD,EAAM,eAAe,EACrBC,EAAaD,CAAK,EAClBlB,EAAe,OAAO,SAAS,KAC/Be,EAAW,EACX,MACJ,MACI,QAAQ,MAAM,wCAAyCL,CAAK,CAEpE,CAEA,QAAQ,MAAM,0BAA2BQ,EAAM,KAAK,EACpDlB,EAAe,OAAO,SAAS,KAC/B,OAAO,SAAS,OAAO,CAC3B,EACA;",
  "names": ["lastLocation", "url", "params", "ondata", "onerror", "accept", "response", "paramsString", "param", "value", "state", "stateType", "push", "urlParams", "newUrl", "scrollToId", "header", "el", "event", "stateHandler"]
}
