{
  "version": 3,
  "sources": ["../../../snow/snow.tsx"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt MIT\nconst snow = document.getElementById(\"snow\") as HTMLDivElement;\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nlet snowflakesCount = 200;\n\nlet bodyHeightPx: number;\nlet pageHeightVh: number;\n\nfunction setHeightVariables(): void {\n    bodyHeightPx = document.documentElement.getBoundingClientRect().height;\n    pageHeightVh = 100 * Math.max(bodyHeightPx / innerHeight, 1);\n}\n\nfunction getSnowAttributes(): void {\n    snowflakesCount = Number(\n        // @ts-expect-error TS2339\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        snow.attributes.count?.value ?? snowflakesCount,\n    );\n}\n\n// This function allows you to turn the snow on and off\nexport function showSnow(value: boolean): void {\n    if (value) {\n        snow.style.display = \"block\";\n    } else {\n        snow.style.display = \"none\";\n    }\n}\n\n// Creating snowflakes\nfunction spawnSnow(snowDensity = 200): void {\n    for (let i = 1; i <= snowDensity; i++) {\n        snow.append(<p />);\n    }\n}\n\n// Append style for each snowflake to the head\nfunction addCss(rules: string[]): void {\n    document.querySelector(\"head\")!.append(\n        <style>{rules}</style>,\n    );\n}\n\n// Math\nfunction randomInt(value = 100): number {\n    return Math.floor(Math.random() * value) + 1;\n}\n\nfunction randomIntRange(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomArbitrary(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n}\n\n// Create style for snowflake\nfunction spawnSnowCSS(snowDensity = 200): void {\n    const rule: string[] = [];\n\n    for (let i = 1; i <= snowDensity; i++) {\n        const randomX = Math.random() * 100; // vw\n        const randomOffset = Math.random() * 10; // vw\n        const randomXEnd = randomX + randomOffset;\n        const randomXEndYoyo = randomX + (randomOffset / 2);\n        const randomYoyoTime = getRandomArbitrary(0.3, 0.8);\n        const randomYoyoY = randomYoyoTime * 100; // vh\n        const randomScale = Math.random();\n        const fallDuration = randomIntRange(10, 30); // s\n        const fallDelay = randomInt(30) * -1; // s\n        const opacity = Math.random();\n\n        rule.push(\n            `#snow p:nth-child(${i}){opacity:${opacity};transform:translate(${randomX}vw,-10px) scale(${randomScale});animation:fall-${i} ${fallDuration}s ${fallDelay}s linear infinite}@keyframes fall-${i}{${\n                randomYoyoTime * 100\n            }%{transform:translate(${randomXEnd}vw,${randomYoyoY}vh) scale(${randomScale})}to{transform:translate(${randomXEndYoyo}vw,100vh) scale(${randomScale})}}`,\n        );\n    }\n\n    addCss(rule);\n}\n\n// Load the rules and execute after the DOM loads\nexport function createSnow(): void {\n    // setHeightVariables();\n    // getSnowAttributes();\n    spawnSnowCSS(snowflakesCount);\n    // if (!snow.firstElementChild) {\n    //     spawnSnow(snowflakesCount);\n    // }\n}\n\n// TODO add option to easily re-render scenery. For example when window resizes.\n// this should be easy as CSS rerenders after display block -> none -> block;\n// TODO add progress bar for slower clients\n"],
  "mappings": "AAkCoB,cAAAA,MAAA,+CAlCpB;AACA,IAAMC,EAAO,SAAS,eAAe,MAAM,EAGvCC,EAAkB,IAmBf,SAASC,EAASC,EAAsB,CACvCA,EACAC,EAAK,MAAM,QAAU,QAErBA,EAAK,MAAM,QAAU,MAE7B,CAUA,SAASC,EAAOC,EAAuB,CACnC,SAAS,cAAc,MAAM,EAAG,OAC5BC,EAAC,SAAO,SAAAD,EAAM,CAClB,CACJ,CAGA,SAASE,EAAUC,EAAQ,IAAa,CACpC,OAAO,KAAK,MAAM,KAAK,OAAO,EAAIA,CAAK,EAAI,CAC/C,CAEA,SAASC,EAAeC,EAAaC,EAAqB,CACtD,OAAAD,EAAM,KAAK,KAAKA,CAAG,EACnBC,EAAM,KAAK,MAAMA,CAAG,EACb,KAAK,MAAM,KAAK,OAAO,GAAKA,EAAMD,EAAM,EAAE,EAAIA,CACzD,CAEA,SAASE,EAAmBF,EAAaC,EAAqB,CAC1D,OAAO,KAAK,OAAO,GAAKA,EAAMD,GAAOA,CACzC,CAGA,SAASG,EAAaC,EAAc,IAAW,CAC3C,IAAMC,EAAiB,CAAC,EAExB,QAASC,EAAI,EAAGA,GAAKF,EAAaE,IAAK,CACnC,IAAMC,EAAU,KAAK,OAAO,EAAI,IAC1BC,EAAe,KAAK,OAAO,EAAI,GAC/BC,EAAaF,EAAUC,EACvBE,EAAiBH,EAAWC,EAAe,EAC3CG,EAAiBT,EAAmB,GAAK,EAAG,EAC5CU,EAAcD,EAAiB,IAC/BE,EAAc,KAAK,OAAO,EAC1BC,EAAef,EAAe,GAAI,EAAE,EACpCgB,EAAYlB,EAAU,EAAE,EAAI,GAC5BmB,EAAU,KAAK,OAAO,EAE5BX,EAAK,KACD,qBAAqB,OAAAC,EAAC,cAAa,OAAAU,EAAO,yBAAwB,OAAAT,EAAO,oBAAmB,OAAAM,EAAW,qBAAoB,OAAAP,EAAC,KAAI,OAAAQ,EAAY,MAAK,OAAAC,EAAS,sCAAqC,OAAAT,EAAC,KAC5L,OAAAK,EAAiB,IACrB,0BAAyB,OAAAF,EAAU,OAAM,OAAAG,EAAW,cAAa,OAAAC,EAAW,6BAA4B,OAAAH,EAAc,oBAAmB,OAAAG,EAAW,MACxJ,CACJ,CAEAnB,EAAOW,CAAI,CACf,CAGO,SAASY,GAAmB,CAG/Bd,EAAae,CAAe,CAIhC",
  "names": ["jsx", "snow", "snowflakesCount", "showSnow", "value", "snow", "addCss", "rules", "jsx", "randomInt", "value", "randomIntRange", "min", "max", "getRandomArbitrary", "spawnSnowCSS", "snowDensity", "rule", "i", "randomX", "randomOffset", "randomXEnd", "randomXEndYoyo", "randomYoyoTime", "randomYoyoY", "randomScale", "fallDuration", "fallDelay", "opacity", "createSnow", "snowflakesCount"]
}
