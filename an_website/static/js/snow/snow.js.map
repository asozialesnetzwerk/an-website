{
  "version": 3,
  "sources": ["../../../snow/snow.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt MIT\nwindow[\"showSnow\"] = (() => {\n    const random = Math.random;\n    const snow = document.getElementById(\"snow\") as HTMLDivElement;\n\n    const snowflakesCount = 200;\n\n    // let bodyHeightPx: number;\n    // let pageHeightVh: number;\n\n    // function setHeightVariables(): void {\n    //     bodyHeightPx = document.documentElement.getBoundingClientRect().height;\n    //     pageHeightVh = 100 * Math.max(bodyHeightPx / window.innerHeight, 1);\n    // }\n\n    // function getSnowAttributes(): void {\n    //     if (snow) {\n    //         snowflakesCount = Number(\n    //             // @ts-expect-error TS2339\n    //             // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    //             snow.attributes?.count?.value ?? snowflakesCount,\n    //         );\n    //     }\n    // }\n\n    // Creating snowflakes\n    // function spawnSnow(snowDensity = 200): void {\n    //     for (let i = 1; i <= snowDensity; i++) {\n    //         const flake = document.createElement(\"p\");\n    //         snow.appendChild(flake);\n    //     }\n    // }\n\n    // Append style for each snowflake to the head\n    function addCss(rule: string): void {\n        const css = document.createElement(\"style\");\n        css.appendChild(document.createTextNode(rule)); // Support for the rest\n        // @ts-expect-error TS2532\n        document.getElementsByTagName(\"head\")[0].appendChild(css);\n    }\n\n    // Math\n    function randomInt(value = 100): number {\n        return Math.floor(random() * value) + 1;\n    }\n\n    function randomIntRange(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(random() * (max - min + 1)) + min;\n    }\n\n    function getRandomArbitrary(min: number, max: number): number {\n        return random() * (max - min) + min;\n    }\n\n    // Create style for snowflake\n    function spawnSnowCSS(snowDensity = 200): void {\n        const getTransform = (\n            translateX: string,\n            translateY: string,\n            scale: number,\n        ): string => {\n            return `transform: translate(${translateX},${translateY}) scale(${scale});`;\n        };\n\n        let rule = \"\";\n\n        for (let i = 1; i <= snowDensity; i++) {\n            const randomX = random() * 100; // vw\n            const randomOffset = random() * 10; // vw\n            const randomXEnd = randomX + randomOffset;\n            const randomXEndYoyo = randomX + (randomOffset / 2);\n            const randomYoyoTime = getRandomArbitrary(0.3, 0.8) as number;\n            const randomYoyoY = randomYoyoTime * 100; // vh\n            const randomScale = random();\n            const fallDuration = randomIntRange(10, 30) as number; // s\n            const fallDelay = randomInt(30) * -1; // s\n\n            rule += `\n#snow p:nth-child(${i}) {\n  opacity: ${random()};\n  ${getTransform(`${randomX}vw`, \"-10px\", randomScale)}\n  animation: fall-${i} ${fallDuration}s ${fallDelay}s linear infinite;\n}\n@keyframes fall-${i} {\n  ${randomYoyoTime * 100}% {${\n                getTransform(`${randomXEnd}vw`, `${randomYoyoY}vh`, randomScale)\n            }}\n  to {${getTransform(`${randomXEndYoyo}vw`, \"100vh\", randomScale)}}\n}`;\n        }\n        addCss(rule);\n    }\n\n    // Load the rules and execute after the DOM loads\n    function createSnow(): void {\n        // setHeightVariables();\n        // getSnowAttributes();\n        spawnSnowCSS(snowflakesCount);\n        // if (!snow.firstElementChild) {\n        //     spawnSnow(snowflakesCount);\n        // }\n    }\n\n    window.onload = createSnow;\n    // TODO add option to easily re-render scenery. For example when window resizes.\n    // this should be easy as CSS rerenders after display block -> none -> block;\n    // TODO add progress bar for slower clients\n\n    return (value: boolean): void => { // showSnow\n        if (value) {\n            snow.style.display = \"block\";\n        } else {\n            snow.style.display = \"none\";\n        }\n    };\n})();\n// @license-end\n"],
  "mappings": "AAAA;AACA,OAAO,UAAe,IAAM,CACxB,MAAMA,EAAS,KAAK,OACdC,EAAO,SAAS,eAAe,MAAM,EAErCC,EAAkB,IA6BxB,SAASC,EAAOC,EAAoB,CAChC,MAAMC,EAAM,SAAS,cAAc,OAAO,EAC1CA,EAAI,YAAY,SAAS,eAAeD,CAAI,CAAC,EAE7C,SAAS,qBAAqB,MAAM,EAAE,CAAC,EAAE,YAAYC,CAAG,CAC5D,CAGA,SAASC,EAAUC,EAAQ,IAAa,CACpC,OAAO,KAAK,MAAMP,EAAO,EAAIO,CAAK,EAAI,CAC1C,CAEA,SAASC,EAAeC,EAAaC,EAAqB,CACtD,OAAAD,EAAM,KAAK,KAAKA,CAAG,EACnBC,EAAM,KAAK,MAAMA,CAAG,EACb,KAAK,MAAMV,EAAO,GAAKU,EAAMD,EAAM,EAAE,EAAIA,CACpD,CAEA,SAASE,EAAmBF,EAAaC,EAAqB,CAC1D,OAAOV,EAAO,GAAKU,EAAMD,GAAOA,CACpC,CAGA,SAASG,EAAaC,EAAc,IAAW,CAC3C,MAAMC,EAAe,CACjBC,EACAC,EACAC,IAEO,wBAAwBF,KAAcC,YAAqBC,MAGtE,IAAIb,EAAO,GAEX,QAASc,EAAI,EAAGA,GAAKL,EAAaK,IAAK,CACnC,MAAMC,EAAUnB,EAAO,EAAI,IACrBoB,EAAepB,EAAO,EAAI,GAC1BqB,EAAaF,EAAUC,EACvBE,EAAiBH,EAAWC,EAAe,EAC3CG,EAAiBZ,EAAmB,GAAK,EAAG,EAC5Ca,EAAcD,EAAiB,IAC/BE,EAAczB,EAAO,EACrB0B,EAAelB,EAAe,GAAI,EAAE,EACpCmB,EAAYrB,EAAU,EAAE,EAAI,GAElCF,GAAQ;AAAA,oBACAc;AAAA,aACPlB,EAAO;AAAA,IAChBc,EAAa,GAAGK,MAAa,QAASM,CAAW;AAAA,oBACjCP,KAAKQ,MAAiBC;AAAA;AAAA,kBAExBT;AAAA,IACdK,EAAiB,SACLT,EAAa,GAAGO,MAAgB,GAAGG,MAAiBC,CAAW;AAAA,QAEvEX,EAAa,GAAGQ,MAAoB,QAASG,CAAW;AAAA,GAGxDtB,EAAOC,CAAI,CACf,CAGA,SAASwB,GAAmB,CAGxBhB,EAAaV,CAAe,CAIhC,CAEA,cAAO,OAAS0B,EAKRrB,GAAyB,CACzBA,EACAN,EAAK,MAAM,QAAU,QAErBA,EAAK,MAAM,QAAU,MAE7B,CACJ,GAAG,EACH;",
  "names": ["random", "snow", "snowflakesCount", "addCss", "rule", "css", "randomInt", "value", "randomIntRange", "min", "max", "getRandomArbitrary", "spawnSnowCSS", "snowDensity", "getTransform", "translateX", "translateY", "scale", "i", "randomX", "randomOffset", "randomXEnd", "randomXEndYoyo", "randomYoyoTime", "randomYoyoY", "randomScale", "fallDuration", "fallDelay", "createSnow"]
}
