{
  "version": 3,
  "sources": ["../../../quotes/quotes.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0-or-later\nimport {\n    get,\n    PopStateHandlers,\n    post,\n    setLastLocation,\n} from \"../utils/utils.js\";\n\nfunction startQuotes() {\n    const nextButton = document.getElementById(\"next\") as HTMLAnchorElement;\n    const upvoteButton = document.getElementById(\"upvote\") as HTMLButtonElement;\n    const downvoteButton = document.getElementById(\n        \"downvote\",\n    ) as HTMLButtonElement;\n    const reportButton = document.getElementById(\"report\") as\n        | HTMLAnchorElement\n        | null;\n\n    const thisQuoteId = [\n        (document.getElementById(\"top\")!).getAttribute(\"quote-id\")!,\n    ];\n    const nextQuoteId = [nextButton.getAttribute(\"quote-id\")!];\n    const params = window.location.search;\n\n    const keys = (() => {\n        const k = new URLSearchParams(params).get(\"keys\");\n        if (!(k?.length)) {\n            return \"WASD\";\n        }\n        // for vim-like set keys to khjl\n        if (k.length === 4) {\n            return k.toUpperCase();\n        } else {\n            alert(\"Invalid keys given, using default.\");\n            return \"WASD\";\n        }\n    })(); // currently only letter keys are supported\n\n    (document.getElementById(\"wasd\")!).innerText =\n        `${keys[0]} (Witzig), ${keys[2]} (Nicht Witzig), ` +\n        `${keys[1]} (Vorheriges) und ${keys[3]} (Nächstes)`;\n\n    document.onkeydown = (event) => {\n        switch (event.code) {\n            case `Key${keys[0]}`:\n                upvoteButton.click();\n                break;\n            case `Key${keys[1]}`:\n                window.history.back();\n                break;\n            case `Key${keys[2]}`:\n                downvoteButton.click();\n                break;\n            case `Key${keys[3]}`:\n                nextButton.click();\n        }\n    };\n\n    const shareButton = document.getElementById(\"share\") as HTMLAnchorElement;\n    const downloadButton = document.getElementById(\n        \"download\",\n    ) as HTMLAnchorElement;\n\n    const author = document.getElementById(\"author\") as HTMLAnchorElement;\n    const quote = document.getElementById(\"quote\") as HTMLAnchorElement;\n    const realAuthor = document.getElementById(\n        \"real-author-name\",\n    ) as HTMLAnchorElement;\n\n    const ratingText = document.getElementById(\"rating-text\") as HTMLDivElement;\n    const ratingImageContainer = document.getElementById(\n        \"rating-img-container\",\n    ) as HTMLDivElement;\n\n    nextButton.removeAttribute(\"href\");\n\n    function updateQuoteId(quoteId: string): void {\n        shareButton.href = `/zitate/share/${quoteId}${params}`;\n        downloadButton.href = `/zitate/${quoteId}.gif${params}`;\n        const [q_id, a_id] = quoteId.split(\"-\", 2);\n        quote.href = `/zitate/info/z/${q_id}${params}`;\n        author.href = `/zitate/info/a/${a_id}${params}`;\n        thisQuoteId[0] = quoteId;\n    }\n\n    function updateRating(rating: number | string) {\n        rating = rating.toString();\n        ratingText.innerText = rating;\n        if ([\"---\", \"???\", \"0\"].includes(rating)) {\n            ratingImageContainer.innerHTML = \"\";\n            return;\n        }\n        const ratingNum = Number.parseInt(rating);\n        const ratingImg = document.createElement(\"div\");\n        ratingImg.className = \"rating-img\" + (\n            ratingNum > 0 ? \" witzig\" : \" nicht-witzig\"\n        );\n        ratingImageContainer.innerHTML = (ratingImg.outerHTML + \" \")\n            .repeat(\n                Math.min(4, Math.abs(ratingNum)),\n            )\n            .trim();\n    }\n\n    function updateVote(vote: number | string): void {\n        function update(\n            btn: HTMLButtonElement,\n            btn_vote: number,\n            btn_vote_str: string,\n        ) {\n            btn.disabled = false;\n            if (vote === btn_vote || vote === btn_vote_str) {\n                // the vote of the button is active\n                btn.setAttribute(\"voted\", btn_vote_str);\n                btn.value = \"0\"; // if pressed again reset the vote\n            } else {\n                // the vote of the button isn't active\n                btn.removeAttribute(\"voted\");\n                btn.value = btn_vote_str; // if pressed, vote with the button\n            }\n        }\n        // update the upvote button\n        update(upvoteButton, 1, \"1\");\n        // update the downvote button\n        update(downvoteButton, -1, \"-1\");\n    }\n\n    interface API_DATA {\n        // either this\n        status: number | undefined;\n        reason: string;\n        // or the following\n        id: string;\n        rating: string;\n        vote: number;\n        quote: string;\n        author: string;\n        real_author: string;\n        real_author_id: number;\n        next: string;\n    }\n\n    function handleData(\n        data: API_DATA,\n    ): boolean {\n        if (data.status) {\n            console.error(data);\n            if (data.status in [429, 420]) {\n                // ratelimited\n                alert(data.reason);\n            }\n            return false;\n        } else if (data.id) {\n            updateQuoteId(data.id);\n            nextQuoteId[0] = data.next;\n            quote.innerText = `»${data.quote}«`;\n            author.innerText = `- ${data.author}`;\n            realAuthor.innerText = data.real_author;\n            realAuthor.href = `/zitate/info/a/${data.real_author_id}${params}`;\n            if (reportButton) {\n                const reportHrefParams = new URLSearchParams(params);\n                reportHrefParams.set(\n                    \"subject\",\n                    `Das falsche Zitat ${data.id} hat ein Problem`,\n                );\n                reportHrefParams.set(\n                    \"message\",\n                    `${quote.innerText} ${realAuthor.innerText}`,\n                );\n                reportButton.href = `/kontakt?${reportHrefParams.toString()}`;\n            }\n            updateRating(data.rating);\n            updateVote(data.vote);\n            return true;\n        }\n        return false;\n    }\n\n    PopStateHandlers[\"quotes\"] = (event: PopStateEvent) => {\n        event.state && handleData(event.state as API_DATA);\n    };\n\n    interface POP_STATE_API_DATA extends API_DATA {\n        stateType: string;\n        url: string;\n    }\n\n    nextButton.onclick = () =>\n        get(\n            `/api/zitate/${nextQuoteId[0]}`,\n            params,\n            (data: POP_STATE_API_DATA) => {\n                if (!handleData(data)) {\n                    return;\n                }\n\n                data.stateType = \"quotes\";\n                data.url = `/zitate/${data.id}${params}`;\n                window.history.pushState(data, \"Falsche Zitate\", data.url);\n                setLastLocation(data.url);\n            },\n        );\n\n    const vote = (vote: string): Promise<void> =>\n        post(\n            `/api/zitate/${thisQuoteId[0]}`,\n            { vote },\n            (data: API_DATA) => void handleData(data),\n        );\n\n    for (const voteButton of [upvoteButton, downvoteButton]) {\n        voteButton.type = \"button\";\n        voteButton.onclick = () => {\n            upvoteButton.disabled = true;\n            downvoteButton.disabled = true;\n            vote(voteButton.value)\n                .then(() => {\n                    upvoteButton.disabled = false;\n                    downvoteButton.disabled = false;\n                })\n                .catch(() => {\n                    upvoteButton.disabled = false;\n                    downvoteButton.disabled = false;\n                });\n        };\n    }\n}\n\nfor (\n    const autoSubmitEl of (document.getElementsByClassName(\n        \"auto-submit-element\",\n    ) as HTMLCollectionOf<HTMLInputElement>)\n) {\n    autoSubmitEl.onchange = () => {\n        (autoSubmitEl.form!).submit();\n    };\n}\n\nstartQuotes();\n// @license-end\n"],
  "mappings": "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",
  "names": ["get", "PopStateHandlers", "post", "setLastLocation", "startQuotes", "nextButton", "upvoteButton", "downvoteButton", "reportButton", "thisQuoteId", "nextQuoteId", "params", "keys", "k", "event", "shareButton", "downloadButton", "author", "quote", "realAuthor", "ratingText", "ratingImageContainer", "updateQuoteId", "quoteId", "q_id", "a_id", "updateRating", "rating", "ratingNum", "ratingImg", "updateVote", "vote", "update", "btn", "btn_vote", "btn_vote_str", "handleData", "data", "reportHrefParams", "voteButton", "autoSubmitEl"]
}
