{
  "version": 3,
  "sources": ["../../../emoji_chat/chat.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0-or-later\n(() => {\n    const messageInput = elById(\"message-input\") as HTMLInputElement;\n    const messageInputForm = messageInput.form!;\n    const messageSection = elById(\"message-section\")!;\n    const usingOpenMoji = elById(\"open-moji-attribution\");\n    const connectionIndicator = elById(\"connection-state\")!;\n    const currentUser = elById(\"current-user\")!;\n    let reconnectTimeout = 100;\n    let reconnectTries = 0;\n    let lastMessage = \"\";\n\n    const timeStampToText = (timestamp: number) => {\n        return new Date(timestamp + 1651075200000).toLocaleString();\n    };\n\n    interface Message {\n        author: string[];\n        content: string[];\n        timestamp: number;\n    }\n\n    const appendMessage = (msg: Message) => {\n        const el = document.createElement(\"div\");\n        if (usingOpenMoji && usingOpenMoji.getAttribute(\"type\") !== \"font\") {\n            for (const emoji of msg.author) {\n                el.append(emojiToIMG(emoji));\n            }\n            el.innerHTML += \": \";\n            for (const emoji of msg.content) {\n                el.append(emojiToIMG(emoji));\n            }\n        } else {\n            el.innerText = `${msg.author.join(\"\")}: ${msg.content.join(\"\")}`;\n        }\n\n        el.setAttribute(\"tooltip\", timeStampToText(msg.timestamp));\n        messageSection.append(el);\n    };\n\n    const displayCurrentUser = (name: string[]) => {\n        currentUser.innerHTML = \"\";\n        if (usingOpenMoji && usingOpenMoji.getAttribute(\"type\") !== \"font\") {\n            for (const emoji of name) {\n                currentUser.append(emojiToIMG(emoji));\n            }\n            return;\n        }\n        currentUser.innerText = name.join(\"\");\n    };\n\n    const emojiToIMG = (emoji: string) => {\n        const emojiCode = [...emoji]\n            .map((e: string) => e.codePointAt(0)!.toString(16).padStart(4, \"0\"))\n            .join(`-`)\n            .toUpperCase();\n\n        const imgEl = document.createElement(\"img\");\n\n        imgEl.src = `/static/img/openmoji-svg-14.0/${emojiCode}.svg`;\n        imgEl.classList.add(\"emoji\");\n        imgEl.alt = emoji;\n\n        return imgEl;\n    };\n\n    const resetLastMessage = () => {\n        if (lastMessage && !messageInput.value) {\n            messageInput.value = lastMessage;\n            lastMessage = \"\";\n        }\n    };\n\n    const setConnectionState = (state: string) => {\n        let tooltip;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        connectionIndicator.onclick = () => {};\n        if (state === \"connecting\") {\n            tooltip = \"Versuche mit WebSocket zu verbinden\";\n        } else if (state === \"connected\") {\n            tooltip = \"Mit WebSocket verbunden!\";\n        } else if (state === \"disconnected\") {\n            tooltip =\n                \"Verbindung getrennt. DrÃ¼cke hier um erneut zu versuchen.\";\n            connectionIndicator.onclick = () => {\n                reconnectTries = 0;\n                reconnectTimeout = 500;\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                connectionIndicator.onclick = () => {};\n                openWS();\n            };\n        } else {\n            console.error(\"invalid state\", state);\n            return;\n        }\n        connectionIndicator.setAttribute(\"state\", state);\n        connectionIndicator.setAttribute(\"tooltip\", tooltip);\n    };\n\n    const handleWebSocketData = (event: { data: string }) => {\n        const data = JSON.parse(event.data) as {\n            type: string;\n            // the following are only present depending on the type\n            message: Message;\n            messages: Message[];\n            current_user: string[];\n            \"Retry-After\": number;\n            users: string[];\n            error: string;\n        };\n        switch (data.type) {\n            case \"messages\": {\n                messageSection.innerText = \"\";\n                for (const msg of data.messages) {\n                    appendMessage(msg);\n                }\n                break;\n            }\n            case \"message\": {\n                // console.debug(\"New message\", data[\"message\"]);\n                appendMessage(data.message);\n                break;\n            }\n            case \"init\": {\n                displayCurrentUser(data.current_user);\n                console.log(\"Connected as\", data.current_user.join(\"\"));\n                setConnectionState(\"connected\");\n                reconnectTimeout = 100;\n                reconnectTries = 0;\n                break;\n            }\n            case \"users\": {\n                // only gets send in dev mode of website\n                console.debug(\"Recieved users data\", data.users);\n                break;\n            }\n            case \"ratelimit\": {\n                resetLastMessage();\n                // TODO: Don't use alert\n                alert(`Retry after ${data[\"Retry-After\"]} seconds.`);\n                break;\n            }\n            case \"error\": {\n                resetLastMessage();\n                alert(data.error); // TODO: Don't use alert\n                break;\n            }\n            default: {\n                console.error(`Invalid type ${data.type}`);\n            }\n        }\n    };\n\n    const openWS = () => {\n        setConnectionState(\"connecting\");\n        const ws = new WebSocket(\n            (window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\") +\n                `//${window.location.host}/websocket/emoji-chat`,\n        );\n        const pingInterval = setInterval(() => ws.send(\"\"), 10000);\n        ws.onclose = (event) => {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            messageInputForm.onsubmit = () => {};\n            if (event.wasClean) {\n                console.debug(\n                    `Connection closed cleanly, code=${event.code} reason=${event.reason}`,\n                );\n                setConnectionState(\"disconnected\");\n                return;\n            }\n            console.debug(\n                `Connection closed, reconnecting in ${reconnectTimeout}ms`,\n            );\n            setConnectionState(\"connecting\");\n            clearInterval(pingInterval);\n            if (reconnectTries > 20) {\n                // ~3 minutes not connected, just give up\n                setConnectionState(\"disconnected\");\n                return;\n            }\n            setTimeout(() => {\n                reconnectTimeout = Math.max(\n                    500, // minimum 500ms, for a better curve\n                    Math.floor(\n                        // maximum 15s, so we don't have to wait too long\n                        Math.min(15000, 1.5 * reconnectTimeout - 200),\n                    ),\n                );\n                reconnectTries++;\n                openWS(); // restart connection\n            }, reconnectTimeout);\n        };\n        ws.onopen = (event) => console.debug(\"Opened WebSocket\", event);\n        ws.onmessage = handleWebSocketData;\n\n        messageInputForm.onsubmit = (event) => {\n            if (messageInput.value !== \"\") {\n                lastMessage = messageInput.value;\n                ws.send(\n                    JSON.stringify({\n                        type: \"message\",\n                        message: messageInput.value,\n                    }),\n                );\n                messageInput.value = \"\";\n            }\n            event.preventDefault();\n        };\n    };\n    openWS();\n})();\n// @license-end\n"],
  "mappings": "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",
  "names": ["messageInput", "messageInputForm", "messageSection", "usingOpenMoji", "connectionIndicator", "currentUser", "reconnectTimeout", "reconnectTries", "lastMessage", "timeStampToText", "timestamp", "appendMessage", "msg", "el", "emoji", "emojiToIMG", "displayCurrentUser", "name", "emojiCode", "e", "imgEl", "resetLastMessage", "setConnectionState", "state", "tooltip", "openWS", "handleWebSocketData", "event", "data", "ws", "pingInterval"]
}
