{
  "version": 3,
  "sources": ["../../../emoji_chat/chat.tsx"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0-or-later\nimport { e as getElementById } from \"@utils/utils.js\";\n\nconst messageInput = getElementById(\n    \"message-input\",\n) as HTMLInputElement;\nconst messageInputForm = messageInput.form!;\nconst messageSection = getElementById(\"message-section\")!;\nconst usingOpenMoji = getElementById(\"openmoji-attribution\");\nconst openmojiVersion = usingOpenMoji?.getAttribute(\"openmoji-version\");\nlet reconnectTimeout = 100;\nlet reconnectTries = 0;\nlet lastMessage = \"\";\n\nconst timeStampToText = (timestamp: number) => {\n    return new Date(timestamp + 1651075200000).toLocaleString();\n};\n\nconst getOpenMojiType = () => usingOpenMoji?.getAttribute(\"type\");\n\ninterface Message {\n    author: string[];\n    content: string[];\n    timestamp: number;\n}\n\nconst EmojiImgComponent = ({ emoji }: { emoji: string }): JSX.Element => {\n    // eslint-disable-next-line @typescript-eslint/no-misused-spread\n    const chars = [...emoji];\n    const emojiCode = (\n        chars.length == 2 && chars[1] === \"\\uFE0F\" ? [chars[0]!] : chars\n    )\n        .map((e: string) => e.codePointAt(0)!.toString(16).padStart(4, \"0\"))\n        .join(\"-\")\n        .toUpperCase();\n\n    const path = `/static/openmoji/svg/${emojiCode}.svg`;\n    return (\n        <img\n            src={openmojiVersion ? `${path}?v=${openmojiVersion}` : path}\n            alt={emoji}\n            className=\"emoji\"\n        />\n    );\n};\n\nconst EmojiComponent = ({ emoji }: { emoji: string }): JSX.Element =>\n    getOpenMojiType() === \"img\" ? <EmojiImgComponent emoji={emoji} /> : emoji;\n\nconst MessageComponent = ({ msg }: { msg: Message }): JSX.Element => (\n    <div tooltip={timeStampToText(msg.timestamp)}>\n        <>\n            {msg\n                .author\n                .map((emoji) => <EmojiComponent emoji={emoji} />)}\n        </>\n        {\": \"}\n        <>\n            {msg\n                .content\n                .map((emoji) => <EmojiComponent emoji={emoji} />)}\n        </>\n    </div>\n);\n\nconst appendMessage = (msg: Message) => {\n    messageSection.append(<MessageComponent msg={msg} />);\n};\n\nconst displayCurrentUser = (name: string[]) => {\n    const id = \"current-user\";\n    getElementById(id)!.replaceWith(\n        <div className={getOpenMojiType() ? \"openmoji\" : \"\"} id={id}>\n            {name.map((emoji) => <EmojiComponent emoji={emoji} />)}\n        </div>,\n    );\n};\n\nconst resetLastMessage = () => {\n    if (lastMessage && !messageInput.value) {\n        messageInput.value = lastMessage;\n        lastMessage = \"\";\n    }\n};\n\ntype ConnectionState = \"connecting\" | \"connected\" | \"disconnected\";\n\nconst stateMapping: Record<ConnectionState, string> = {\n    connecting: \"Versuche mit WebSocket zu verbinden\",\n    connected: \"Mit WebSocket verbunden!\",\n    disconnected: \"Verbindung getrennt. DrÃ¼cke hier um erneut zu versuchen.\",\n};\n\nconst setConnectionState = (state: ConnectionState) => {\n    const id = \"connection-state\";\n\n    const onclick = state == \"disconnected\"\n        ? (() => {\n            reconnectTries = 0;\n            reconnectTimeout = 500;\n            getElementById(id)!.removeEventListener(\"click\", onclick!);\n            openWS();\n        })\n        : undefined;\n\n    getElementById(id)!.replaceWith(\n        <div\n            tooltip={stateMapping[state]}\n            tooltip-position=\"right\"\n            onclick={onclick}\n            data-state={state}\n            id={id}\n        />,\n    );\n};\n\nconst handleWebSocketData = (event: { data: string }) => {\n    const data = JSON.parse(event.data) as {\n        type: string;\n        // the following are only present depending on the type\n        message: Message;\n        messages: Message[];\n        current_user: string[];\n        retry_after: number;\n        users: string[];\n        error: string;\n    };\n    switch (data.type) {\n        case \"messages\": {\n            messageSection.innerText = \"\";\n            for (const msg of data.messages) {\n                appendMessage(msg);\n            }\n            break;\n        }\n        case \"message\": {\n            // console.debug(\"New message\", data[\"message\"]);\n            appendMessage(data.message);\n            break;\n        }\n        case \"init\": {\n            displayCurrentUser(data.current_user);\n            console.log(\"Connected as\", data.current_user.join(\"\"));\n            setConnectionState(\"connected\");\n            reconnectTimeout = 100;\n            reconnectTries = 0;\n            break;\n        }\n        case \"users\": {\n            // only gets sent in dev mode of website\n            console.debug(\"Received users data\", data.users);\n            break;\n        }\n        case \"ratelimit\": {\n            resetLastMessage();\n            // TODO: Don't use alert\n            alert(`Retry after ${data.retry_after} seconds.`);\n            break;\n        }\n        case \"error\": {\n            resetLastMessage();\n            alert(data.error); // TODO: Don't use alert\n            break;\n        }\n        default: {\n            console.error(`Invalid type ${data.type}`);\n        }\n    }\n};\n\nconst openWS = () => {\n    setConnectionState(\"connecting\");\n    const ws = new WebSocket(\n        (location.protocol === \"https:\" ? \"wss:\" : \"ws:\") +\n            `//${location.host}/websocket/emoji-chat`,\n    );\n    const pingInterval = setInterval(() => {\n        if (ws.readyState == ws.OPEN) {\n            ws.send(\"\");\n        }\n    }, 10000);\n\n    ws.addEventListener(\"close\", (event) => {\n        clearInterval(pingInterval);\n        if (event.wasClean) {\n            console.debug(\n                `Connection closed cleanly, code=${event.code} reason=${event.reason}`,\n            );\n            setConnectionState(\"disconnected\");\n            return;\n        }\n        console.debug(\n            `Connection closed, reconnecting in ${reconnectTimeout}ms  (${reconnectTries})`,\n        );\n        setConnectionState(\"connecting\");\n        if (reconnectTries > 10) {\n            // not connected for long time, just give up\n            setConnectionState(\"disconnected\");\n            return;\n        }\n        setTimeout(() => {\n            reconnectTimeout = Math.max(\n                500, // minimum 500ms, for a better curve\n                Math.floor(\n                    // maximum 15s, so we don't have to wait too long\n                    Math.min(15000, 1.5 * reconnectTimeout - 200),\n                ),\n            );\n            reconnectTries++;\n            openWS(); // restart connection\n        }, reconnectTimeout);\n    });\n\n    ws.addEventListener(\"open\", (event) => {\n        setConnectionState(\"connected\");\n        console.debug(\"Opened WebSocket\", event);\n    });\n\n    ws.addEventListener(\"error\", (event) => {\n        console.error({ msg: \"got error from websocket\", event });\n    });\n\n    ws.addEventListener(\"message\", (event) => {\n        handleWebSocketData(event);\n    });\n\n    messageInputForm.addEventListener(\"submit\", (event) => {\n        if (messageInput.value !== \"\") {\n            lastMessage = messageInput.value;\n            ws.send(\n                JSON.stringify({\n                    type: \"message\",\n                    message: messageInput.value,\n                }),\n            );\n            messageInput.value = \"\";\n        }\n        event.preventDefault();\n    });\n};\nopenWS();\n"],
  "mappings": "AACA,OAAS,KAAKA,MAAsB,+CAqC5B,OAaA,YAAAC,EAbA,OAAAC,EAYJ,QAAAC,MAZI,+CAtCR;AAGA,IAAMC,EAAeJ,EACjB,eACJ,EACMK,EAAmBD,EAAa,KAChCE,EAAiBN,EAAe,iBAAiB,EACjDO,EAAgBP,EAAe,sBAAsB,EACrDQ,EAAkBD,GAAA,YAAAA,EAAe,aAAa,oBAChDE,EAAmB,IACnBC,EAAiB,EACjBC,EAAc,GAEZC,EAAmBC,GACd,IAAI,KAAKA,EAAY,UAAa,EAAE,eAAe,EAGxDC,EAAkB,IAAMP,GAAA,YAAAA,EAAe,aAAa,QAQpDQ,EAAoB,CAAC,CAAE,MAAAC,CAAM,IAAsC,CAErE,IAAMC,EAAQ,CAAC,GAAGD,CAAK,EACjBE,GACFD,EAAM,QAAU,GAAKA,EAAM,CAAC,IAAM,IAAW,CAACA,EAAM,CAAC,CAAE,EAAIA,GAE1D,IAAKE,GAAcA,EAAE,YAAY,CAAC,EAAG,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,EAClE,KAAK,GAAG,EACR,YAAY,EAEXC,EAAO,wBAAwB,OAAAF,EAAS,QAC9C,OACIhB,EAAC,OACG,IAAKM,EAAkB,GAAG,OAAAY,EAAI,OAAM,OAAAZ,GAAoBY,EACxD,IAAKJ,EACL,UAAU,QACd,CAER,EAEMK,EAAiB,CAAC,CAAE,MAAAL,CAAM,IAC5BF,EAAgB,IAAM,MAAQZ,EAACa,EAAA,CAAkB,MAAOC,EAAO,EAAKA,EAElEM,EAAmB,CAAC,CAAE,IAAAC,CAAI,IAC5BpB,EAAC,OAAI,QAASS,EAAgBW,EAAI,SAAS,EACvC,UAAArB,EAAAD,EAAA,CACK,SAAAsB,EACI,OACA,IAAKP,GAAUd,EAACmB,EAAA,CAAe,MAAOL,EAAO,CAAE,EACxD,EACC,KACDd,EAAAD,EAAA,CACK,SAAAsB,EACI,QACA,IAAKP,GAAUd,EAACmB,EAAA,CAAe,MAAOL,EAAO,CAAE,EACxD,GACJ,EAGEQ,EAAiBD,GAAiB,CACpCjB,EAAe,OAAOJ,EAACoB,EAAA,CAAiB,IAAKC,EAAK,CAAE,CACxD,EAEME,EAAsBC,GAAmB,CAC3C,IAAMC,EAAK,eACX3B,EAAe2B,CAAE,EAAG,YAChBzB,EAAC,OAAI,UAAWY,EAAgB,EAAI,WAAa,GAAI,GAAIa,EACpD,SAAAD,EAAK,IAAKV,GAAUd,EAACmB,EAAA,CAAe,MAAOL,EAAO,CAAE,EACzD,CACJ,CACJ,EAEMY,EAAmB,IAAM,CACvBjB,GAAe,CAACP,EAAa,QAC7BA,EAAa,MAAQO,EACrBA,EAAc,GAEtB,EAIMkB,EAAgD,CAClD,WAAY,sCACZ,UAAW,2BACX,aAAc,0DAClB,EAEMC,EAAsBC,GAA2B,CACnD,IAAMJ,EAAK,mBAELK,EAAUD,GAAS,eAClB,IAAM,CACLrB,EAAiB,EACjBD,EAAmB,IACnBT,EAAe2B,CAAE,EAAG,oBAAoB,QAASK,CAAQ,EACzDC,EAAO,CACX,EACE,OAENjC,EAAe2B,CAAE,EAAG,YAChBzB,EAAC,OACG,QAAS2B,EAAaE,CAAK,EAC3B,mBAAiB,QACjB,QAASC,EACT,aAAYD,EACZ,GAAIJ,EACR,CACJ,CACJ,EAEMO,EAAuBC,GAA4B,CACrD,IAAMC,EAAO,KAAK,MAAMD,EAAM,IAAI,EAUlC,OAAQC,EAAK,KAAM,CACf,IAAK,WAAY,CACb9B,EAAe,UAAY,GAC3B,QAAWiB,KAAOa,EAAK,SACnBZ,EAAcD,CAAG,EAErB,KACJ,CACA,IAAK,UAAW,CAEZC,EAAcY,EAAK,OAAO,EAC1B,KACJ,CACA,IAAK,OAAQ,CACTX,EAAmBW,EAAK,YAAY,EACRA,EAAK,aAAa,KAAK,EAAE,EACrDN,EAAmB,WAAW,EAC9BrB,EAAmB,IACnBC,EAAiB,EACjB,KACJ,CACA,IAAK,QAAS,CAE2B0B,EAAK,MAC1C,KACJ,CACA,IAAK,YAAa,CACdR,EAAiB,EAEjB,MAAM,eAAe,OAAAQ,EAAK,YAAW,YAAW,EAChD,KACJ,CACA,IAAK,QAAS,CACVR,EAAiB,EACjB,MAAMQ,EAAK,KAAK,EAChB,KACJ,CACA,QACI,QAAQ,MAAM,gBAAgB,OAAAA,EAAK,KAAM,CAEjD,CACJ,EAEMH,EAAS,IAAM,CACjBH,EAAmB,YAAY,EAC/B,IAAMO,EAAK,IAAI,WACV,SAAS,WAAa,SAAW,OAAS,OACvC,KAAK,gBAAS,KAAI,wBAC1B,EACMC,EAAe,YAAY,IAAM,CAC/BD,EAAG,YAAcA,EAAG,MACpBA,EAAG,KAAK,EAAE,CAElB,EAAG,GAAK,EAERA,EAAG,iBAAiB,QAAUF,GAAU,CAEpC,GADA,cAAcG,CAAY,EACtBH,EAAM,SAAU,CAEZ,mCAAmC,OAAAA,EAAM,KAAI,YAAW,OAAAA,EAAM,QAElEL,EAAmB,cAAc,EACjC,MACJ,CAKA,GAHI,sCAAsC,OAAArB,EAAgB,SAAQ,OAAAC,EAAc,KAEhFoB,EAAmB,YAAY,EAC3BpB,EAAiB,GAAI,CAErBoB,EAAmB,cAAc,EACjC,MACJ,CACA,WAAW,IAAM,CACbrB,EAAmB,KAAK,IACpB,IACA,KAAK,MAED,KAAK,IAAI,KAAO,IAAMA,EAAmB,GAAG,CAChD,CACJ,EACAC,IACAuB,EAAO,CACX,EAAGxB,CAAgB,CACvB,CAAC,EAED4B,EAAG,iBAAiB,OAASF,GAAU,CACnCL,EAAmB,WAAW,CAElC,CAAC,EAEDO,EAAG,iBAAiB,QAAUF,GAAU,CACpC,QAAQ,MAAM,CAAE,IAAK,2BAA4B,MAAAA,CAAM,CAAC,CAC5D,CAAC,EAEDE,EAAG,iBAAiB,UAAYF,GAAU,CACtCD,EAAoBC,CAAK,CAC7B,CAAC,EAED9B,EAAiB,iBAAiB,SAAW8B,GAAU,CAC/C/B,EAAa,QAAU,KACvBO,EAAcP,EAAa,MAC3BiC,EAAG,KACC,KAAK,UAAU,CACX,KAAM,UACN,QAASjC,EAAa,KAC1B,CAAC,CACL,EACAA,EAAa,MAAQ,IAEzB+B,EAAM,eAAe,CACzB,CAAC,CACL,EACAF,EAAO",
  "names": ["getElementById", "Fragment", "jsx", "jsxs", "messageInput", "messageInputForm", "messageSection", "usingOpenMoji", "openmojiVersion", "reconnectTimeout", "reconnectTries", "lastMessage", "timeStampToText", "timestamp", "getOpenMojiType", "EmojiImgComponent", "emoji", "chars", "emojiCode", "e", "path", "EmojiComponent", "MessageComponent", "msg", "appendMessage", "displayCurrentUser", "name", "id", "resetLastMessage", "stateMapping", "setConnectionState", "state", "onclick", "openWS", "handleWebSocketData", "event", "data", "ws", "pingInterval"]
}
