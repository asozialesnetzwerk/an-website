name: Deploy
on:
  push:
    branches: [ main ]
concurrency:
  group: deploy
  cancel-in-progress: true
env:
  PIP_DISABLE_PIP_VERSION_CHECK: yes

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install build frontend
        run: pip install "build<2"
      - name: Build
        run: python -m build
      - name: Upload as build artifact
        uses: actions/upload-artifact@v3
        with:
          path: dist

  test-wheel:
    name: Test wheel
    runs-on: ubuntu-latest
    needs:
      - build
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - 3.11
          #- 3.12
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Install wheel
        run: pip install *.whl
      - name: Test starting
        timeout-minutes: 1
        run: python -m an_website -c

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - 3.11
          #- 3.12
        stack-version:
          - 7.17.9
          #- 8.6.2
        license:
          - basic
          - trial
    services:
      redis:
        image: redis/redis-stack-server:6.2.6-v7
        ports:
          - 6379:6379
    steps:
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: Start Elasticsearch
        if: ${{ startsWith(matrix.stack-version, '7') }}
        uses: elastic/elastic-github-actions/elasticsearch@2c3ec0418fabc996180995c47b86a65b581f1561
        with:
          stack-version: ${{ matrix.stack-version }}
          security-enabled: false
          nodes: 3
          license: ${{ matrix.license }}
          plugins: |
            analysis-icu
            analysis-phonetic
            ingest-attachment
            mapper-size
            mapper-murmur3
            mapper-annotated-text
      - name: Start Elasticsearch
        if: ${{ startsWith(matrix.stack-version, '8') }}
        uses: elastic/elastic-github-actions/elasticsearch@2c3ec0418fabc996180995c47b86a65b581f1561
        with:
          stack-version: ${{ matrix.stack-version }}
          security-enabled: false
          nodes: 3
          license: ${{ matrix.license }}
          plugins: |
            analysis-icu
            analysis-phonetic
            mapper-size
            mapper-murmur3
            mapper-annotated-text
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Install libcurl4-openssl-dev for compiling PycURL
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Install stuff needed for the tests
        run: grep -E "^(coverage|html5lib|pytest)" requirements-ci.txt | xargs pip install
      - name: Run pytest
        timeout-minutes: 5
        run: pytest --durations=0 --verbose --cov --cov-report=term:skip-covered
      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v3
        with:
          path: .coverage
          name: coverage

  sourcemaps:
    name: Upload sourcemaps
    runs-on: ubuntu-latest
    needs:
      - test-wheel
      - tests
    permissions: {}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Install required library
        run: pip install packaging
      - name: Version
        id: version
        shell: python
        run: |
          import os
          from pathlib import Path
          from subprocess import run

          from packaging.utils import parse_sdist_filename

          command = "ls an-website-*.tar.gz"
          result = run(command, shell=True, capture_output=True)
          filename = result.stdout.decode("UTF-8").strip()
          name, version = parse_sdist_filename(filename)
          path = Path(os.getenv("GITHUB_OUTPUT"))
          path.write_text(f"version={version}\n")
      - name: Unpack source distribution
        run: tar xvf an-website-*.tar.gz
      - name: Upload sourcemaps
        run: |
          cd an-website-*/an_website
          find static/js -type f -name "*.js" -exec \
            curl -sSfk https://kibana.asozial.org:5601/api/apm/sourcemaps \
              -H "Authorization: ApiKey ${{ secrets.SOURCEMAP_API_KEY }}" \
              -H "kbn-xsrf: true" \
              -F service_name="an-website" \
              -F service_version="${{ steps.version.outputs.version }}" \
              -F bundle_filepath="/{}" \
              -F sourcemap=@{}.map \;

  deploy:
    name: Deploy website
    runs-on: ubuntu-latest
    needs:
      - test-wheel
      - tests
    permissions: {}
    environment:
      name: production
      url: https://asozial.org
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Deploy website
        run: |
          curl -sSf -T *.whl https://asozial.org/api/update/ \
            -H "Authorization: ${{ secrets.UPDATE_API_SECRET }}"

  github-pages:
    name: GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - deploy
    permissions:
      contents: read
      id-token: write
      pages: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: Pipfile.lock
      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
      - name: Make directory
        run: mkdir github-pages
      - name: Hash files
        run: ./scripts/hash_files.py > github-pages/hashes.txt
      - name: Install Coverage.py
        run: grep "^coverage" requirements-ci.txt | xargs pip install
      - name: Create coverage files
        run: |
          coverage html -d github-pages/coverage
          coverage json -o github-pages/coverage.json
          ./generate-badge.sh > github-pages/coverage/badge.svg
          rm -f github-pages/coverage/.gitignore
      - name: Generate commitment.txt
        run: git log "--pretty=%H %ct %s" > github-pages/commitment.txt
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: github-pages
      - name: Deploy GitHub Pages site
        id: deployment
        uses: actions/deploy-pages@v1

  build-oci-image:
    name: Build OCI image
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      packages: write
    env:
      CACHE_REPOSITORY: ghcr.io/${{ github.repository }}---cache
    steps:
      - name: Upgrade Buildah
        run: |
          wget https://snapshot.debian.org/archive/debian/20230401T085842Z/pool/main/g/golang-github-containers-buildah/buildah_1.28.2+ds1-1+b2_amd64.deb
          sudo dpkg --force-depends -i buildah_1.28.2+ds1-1+b2_amd64.deb
      - name: Download youki
        run: |
          wget https://github.com/containers/youki/releases/download/v0.0.5/youki_0_0_5_linux.tar.gz
          tar xOf youki_0_0_5_linux.tar.gz youki_0_0_5_linux/youki-0.0.5/youki > /opt/youki
          rm -f youki_0_0_5_linux.tar.gz
          chmod +x /opt/youki
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install trove-classifiers
        run: pip install trove-classifiers==2022.12.22
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Extract source distribution
        run: |
          tar xvf *.tar.gz
          rm -f *.tar.gz
      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: ${{ env.CACHE_REPOSITORY }}
      - name: Build image
        run: |
          cd an-website*
          sudo buildah build -t an-website:git --layers --cache-from="${{ env.CACHE_REPOSITORY }}" --cache-to="${{ env.CACHE_REPOSITORY }}" $(./build-args.sh) .
          cd ..
        env:
          BUILDAH_RUNTIME: /opt/youki
      - name: Save image
        run: sudo buildah push --all --format=oci --compression-format=zstd:chunked --compression-level=20 an-website:git oci-archive:oci-archive.tar
      - name: Upload as build artifact
        uses: actions/upload-artifact@v3
        with:
          path: oci-archive.tar

  test-running-oci-image:
    name: Test running OCI image
    runs-on: ubuntu-latest
    needs:
      - build-oci-image
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Run image
        timeout-minutes: 1
        run: podman run -t oci-archive:oci-archive.tar -c

  run-tests-in-oci-image:
    name: Run tests in OCI image
    runs-on: ubuntu-latest
    needs:
      - build-oci-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Run tests
        timeout-minutes: 5
        run: podman run -t --entrypoint=/bin/sh -v ./requirements-ci.txt:/data/requirements-ci.txt:z,ro -v ./tests:/data/tests:z oci-archive:oci-archive.tar -c "grep -E '^(coverage|html5lib|pytest)' requirements-ci.txt | xargs /venv/bin/pip install && /venv/bin/pytest --verbose"

  push-oci-image:
    name: Push OCI image
    runs-on: ubuntu-latest
    needs:
      - test-running-oci-image
      # - run-tests-in-oci-image
    permissions:
      packages: write
    steps:
      - name: Upgrade Skopeo
        run: |
          wget https://snapshot.debian.org/archive/debian/20230401T085842Z/pool/main/s/skopeo/skopeo_1.9.3+ds1-1+b2_amd64.deb
          sudo dpkg --force-depends -i skopeo_1.9.3+ds1-1+b2_amd64.deb
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: ghcr.io/${{ github.repository }}
      - name: Push image
        run: skopeo copy --all --preserve-digests oci-archive:oci-archive.tar docker://ghcr.io/${{ github.repository }}:git
